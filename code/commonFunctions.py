import numpy as np
from numpy.linalg import norm
import math
import datetime

def saveTestOnFile(save, fileName, s, algorithm, wt, W, matrixType, Q, R):
	print("Factorization finished")
	
	date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
	parallel = "seq" if s == 0 else "par"
	(m,n) = W.shape
	condW = np.linalg.cond(W)
	condQ = np.linalg.cond(Q)
	orth_factor = np.linalg.norm(Q.T @ Q - np.identity(n))
	WvsQR = norm(W - Q @ R)
	
	if save:
		file_path = "../testing/"
		f = open(file_path + fileName, "a")
		f.write("\n" + date+";"+str(s)+";"+algorithm+";"+parallel+";"+str(m)+";"+str(n)+";"+str(matrixType)+";"+str(condW)+";"+str(condQ)+";"+str(wt)+";"+str(orth_factor)+";"+str(WvsQR))
		f.close()
	
	print("The factorization took " + str(wt) + " seconds")
	print(algorithm + " executed in " + ("sequential" if s == 0 else "parallel on " + str(s) + " processors") + " on a (" + str(m) + "x" + str(n) + ") matrix of the " + str(matrixType) + "th type with condition number " + str(condW), " (logcond " + str(int(math.log10(condW)+0.5)) + ")")
	print("The loss of orthogonality is " + str(orth_factor) + " and norm(WvsQR) is " + str(WvsQR))
	#print("QvsrealQ is " + str(QvsrealQ) + " and RvsrealR is " + str(RvsrealR))
	

def genMatrix(m, n, matrixType, cond = 1e3):
	np.random.set_state(('MT19937', np.array([2147483648,62503142,3961056994,1008330651,409311319,4222632303,942574692,2381058974,871942618,1133962761,41724454,3737668778,2657069005,612167651,663414816,596112597,1425700472,3658733644,1009840650,831945940,394501361,4259601467,3859141007,958525715,3401486556,1713597116,4253251097,4155240329,3632593238,3730050251,1904974689,901636271,2809520823,4123933841,1323082662,3632735109,1364974313,289819033,4261475530,1376234485,4023132782,3780801221,2249606348,2238017671,910869336,2154588659,2307776423,1207161121,3928097824,3743797114,748384289,1886310572,2932388922,2633278251,379387030,3917605427,2619321853,3316186935,1700278082,292309710,1947210050,2764560472,4290163420,3647068659,265692820,1848244598,242424201,472265380,285601335,715352188,1256658861,3172051043,1742769858,2204959474,3875404711,3096158697,2836643201,2609367064,3307969921,3635976938,1593396091,709129243,162213521,837363115,708152391,2043187223,3729981144,1101220497,3198589892,2109969756,3324707505,925475851,2593249859,2529807446,3620911160,2038011243,3568099438,1065987798,3724401543,4274838734,3316165402,1988810325,166848059,3061404299,730666799,1627077476,3055845886,308599430,505980474,3953252926,4158549236,3499089245,92707972,1339627398,609195509,3786409586,4217266860,645915040,3061147007,513660975,1095442857,2614139215,2167078448,3077964244,225578272,2302202279,1601980694,4190555732,2344522748,1554514935,3907180568,4069467917,3659915287,1073701152,3985813464,424450366,3683299240,3211982573,4009719973,4206048977,766123576,309657067,2697968997,4265305961,2432316536,867341805,178910867,2581094042,1188094882,1781444593,2193082173,3656727495,2518925889,781491723,2939704994,3374838533,2529842456,3988921181,1808519969,1798732836,418416434,2959400251,3509275217,3821846222,3893757348,1702631843,1624569886,2439441044,417331069,1740132391,2857605769,1603694708,206519133,2129097592,3150847972,4095444169,152543509,4035658964,330569998,865085778,3540576250,1581628826,3070709517,2323945270,3992626712,2256230628,3385520592,1086405987,3331201500,1437566256,3426604887,3233579566,4163449707,2963049411,1721443169,2098589079,1034536091,1444098252,2081953618,2730898868,871280844,2494411058,815840250,2709189144,4244228715,1592142201,3098615323,1979017639,2257922327,3804815511,900391056,3669316855,1084172525,3102926125,1772767008,4081057293,3247834868,3684259590,2202513885,3905005027,2681969929,625404889,1192393464,207889014,1488860796,1205236361,612765948,788704000,2244914556,1084654713,1843400746,1680480984,652834891,2732481857,2544808564,3358786257,2895994511,2997643059,466481895,2548199472,2075426998,3562416137,2949050492,1375481918,2915573306,1200200790,2550495503,2191280686,425518014,3533665280,738117348,2874006511,1995330748,4169110752,3443272022,2182568837,841230438,2671549539,4079955413,541308865,1596867356,2593986626,1557826704,393743626,1721249978,1765246120,1533665075,1011831341,66664043,4006378835,3649286697,1045449986,87112627,2409088456,2984844243,3887615738,87499333,539400697,2364891007,4196843028,3683986935,4224102233,1372698187,1329380126,194541130,4082309580,1652679787,1757354413,2184053740,2083876202,1567790088,1649882453,905138753,3888301853,4254653266,700529715,4253258785,140497856,1640136472,3075106472,3792139029,3881195209,12841705,1410492096,1802002794,4293765042,221427080,3517025635,995806632,3247863369,1452691612,863055043,2649198597,2528056368,3037991694,3173681800,1674478236,3001173629,558483491,2522483400,25814219,4067634476,3576047324,437489809,1698471438,2410186103,3419746975,277881314,3269658561,3967165929,50952787,4053075191,1040322192,1052386597,3827241141,784142575,2878118414,2552643193,2426442650,1999570797,785362109,3931368332,3166142525,2302783091,891941963,2251273904,1188292169,2567657001,57335736,2070284793,662973550,4007618253,3255734988,523163249,1986991125,1363095357,1505481481,2784218412,3931562396,1590124085,3216992029,3063420167,1624044310,3060052614,1930184478,866306621,1084946304,3384631407,3921108149,1499007238,1397874411,395662423,1775000638,2507238062,3681170528,2486793867,3711451610,1534005744,712175976,1570950912,984000244,3672230526,3587139493,3567839034,3224302700,851469727,1204964136,2074864169,2884419038,2806088094,3113674716,806857829,1594224423,1181997036,3794276466,3074694950,7835621,2867797360,3156149685,1459381166,2994262778,3584003008,1805235107,3402885521,323203633,1439729679,3873310548,3474100512,141694992,3405197928,2873032356,3021447733,2380050958,994915794,1279072471,2189726102,2288923564,979705658,3150761142,2477468329,1957436702,2661472893,3735317102,701619747,3784354354,3525160322,2655392412,2703207165,3532996999,2967823738,3014947742,4247974368,4141650654,1084484860,2235720696,2416854732,1720219258,4072515938,1888838815,1884441056,2369219285,1055070332,4265667162,2566373717,3298885618,247502431,2817265798,4124650315,3824485559,2192355827,277295485,645581560,2002969168,1074216664,4152914114,1022726023,3396851029,2457272297,456359017,2308286199,3688589641,3752521781,3707674196,1408912296,2378630725,555031370,3788984557,852744337,463937493,2878967366,4259821421,3982214249,3732208918,2294570075,1119276076,3208328729,1403915644,2656766148,4221248113,432133075,1681452794,3954935524,1566526757,1579687466,3410415604,4021867367,1746727382,1859122237,3865238720,1851324871,3870123895,219720698,3200495825,2796112694,3035804120,620078887,1647031593,4187360713,1736596536,2913341540,1288037175,1477770187,4238344618,4171111468,3215337796,3903747633,1547441446,217137235,1298223923,130888530,454335358,1900086483,3159353869,3811121270,3996701890,153942702,2973346059,380931179,2366923102,3432774377,1188082930,3088924034,280490221,1150422768,1070657090,1504596529,949763894,3012934855,50731396,1715430496,415211141,1213803803,3198991838,2605324949,2850834022,1352675474,1587252473,3352398670,2478788645,3181669766,3784210524,1706088239,1873497409,4068843415,2856253436,2056958917,1818741021,3702419372,448436488,760116625,3521286952,1776613398,1275365798,1209088910,2037253044,1243211771,840621832,2086057417,1424120520,3427533470,3536794829,264593306,2618624175,1625675815,19436506,537485270,2065520919,2155551689,2335163085,3535185961,1459508452,3006832794,2418175344,2856851159,1169277147,753538168,2809456182,3405323686,1329430727,340849362,3917168201,3936864376,796801588,570781559,2339605073,2991903691,2653047672,3380213787,3986907441,799636534,3828642974,2559132379,2434170004,4001181730,3028413371,236044883,2016216671,512022363,2592784896,2421543783,3674744426,550635597,2801621607,331856101,1363110381,238761124,271169475,731189127,2211098376,3273904764,2509548526,2073379223,1110787207,523894758,2866810154,1829007862,4171852811,1326609549,3324193273,1462155204,1553714313,569061492,1054698999,593266318],dtype=np.uint),623,0,0.0))
	
	if matrixType == 0:
		f = lambda x, y: math.sin(10*(y+x))/(math.cos(100*(y-x))+1.1)
		W = np.empty((m, n))
		
		return np.array([np.array([f(i/(m-1), j/(n-1)) for j in range(n)]) for i in range(m)])
	elif matrixType == 1:
		return np.random.rand(m,n)
	else:
		logdiag = np.random.rand(n)
		logdiag = (logdiag-logdiag.min())/(logdiag.max()-logdiag.min()) - 0.4
		diag = np.power(cond, logdiag)

		D = np.diag(diag)

		U,_ = np.linalg.qr(np.random.rand(m,n), mode='reduced')
		V,_ = np.linalg.qr(np.random.rand(n,n), mode='reduced')

		return U @ (D @ V)

